[{"C:\\GitHubLocal\\React-Bootstrap-Round3\\test-rev-3\\src\\index.js":"1","C:\\GitHubLocal\\React-Bootstrap-Round3\\test-rev-3\\src\\App.js":"2","C:\\GitHubLocal\\React-Bootstrap-Round3\\test-rev-3\\src\\reportWebVitals.js":"3","C:\\GitHubLocal\\React-Bootstrap-Round3\\test-rev-3\\src\\utils\\fetcher.js":"4","C:\\GitHubLocal\\React-Bootstrap-Round3\\test-rev-3\\src\\utils\\jsonSearch.js":"5"},{"size":601,"mtime":1611267203033,"results":"6","hashOfConfig":"7"},{"size":13432,"mtime":1611430891561,"results":"8","hashOfConfig":"7"},{"size":362,"mtime":499162500000,"results":"9","hashOfConfig":"7"},{"size":997,"mtime":1610737568429,"results":"10","hashOfConfig":"7"},{"size":3355,"mtime":1605627531467,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"156vpnm",{"filePath":"15","messages":"16","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"22"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"22"},"C:\\GitHubLocal\\React-Bootstrap-Round3\\test-rev-3\\src\\index.js",[],["26","27"],"C:\\GitHubLocal\\React-Bootstrap-Round3\\test-rev-3\\src\\App.js",["28","29","30","31","32","33"],"C:\\GitHubLocal\\React-Bootstrap-Round3\\test-rev-3\\src\\reportWebVitals.js",[],"C:\\GitHubLocal\\React-Bootstrap-Round3\\test-rev-3\\src\\utils\\fetcher.js",["34"],"//takes an array containing any number of string urls that return json in order of priority. It will go through the list until one successfully returns a json object\r\n//recursive function\r\nexport default async function fetcher(...props) {\r\n// we need to load from 1 or more URLs and then fall back to the most recently saved copied.\r\n\r\n//Base Case: if props is empty fetches failed, return null\r\n            if(props.length == 0){\r\n                return null;\r\n            }\r\n            try{\r\n                let res = await fetch(props[0]);\r\n//success, so convert fetched string to json\r\n                try{\r\n                    let result = res.json();\r\n                    return result;\r\n                }\r\n                catch(err){\r\n                    throw err;\r\n                }\r\n            }\r\n//if fetch failed, remove the attempted url from the array and recurse\r\n            catch(err){\r\n                props.shift();\r\n                return fetcher(...props);\r\n            }\r\n}",["35","36"],"C:\\GitHubLocal\\React-Bootstrap-Round3\\test-rev-3\\src\\utils\\jsonSearch.js",["37","38","39"],"//takes a json object (result), recurses through an array of strings (category) representing the path in the object \r\n//to access the values to compare to the picker selection, and compares it to the picker selection (itemValue) \r\n//It returns false for no match, or true if matched\r\n\r\nexport default {jsonSearch, jsonSearchFuzzy}\r\n\r\nexport function jsonSearch(result, categoryOriginal, itemValue){\r\n    //create a copy of categoryOriginal so that the array being passed in isn't destroyed\r\n    let category = categoryOriginal.slice(0);\r\n    //BASE CASE: category array is empty meaning result contains the value to compare to itemValue\r\n            if(category.length == 0){\r\n                    if(result === itemValue){\r\n                        return true;\r\n                    }\r\n                    else{\r\n                        return false;\r\n                    }\r\n            }\r\n    //More recursion needed\r\n            else{\r\n                let z = category.shift();\r\n    //if current part is array, apply map \r\n                if(z === true){\r\n                    let mapResult = result.map((temp) => {\r\n                        let newCategory = category.slice(0);\r\n                        return jsonSearch(temp, newCategory, itemValue);\r\n                    });\r\n                    for(let thing of mapResult){\r\n                        if(thing){\r\n                            \r\n                            return true;\r\n                        }\r\n                    }\r\n                    return false;\r\n                }\r\n                else{\r\n                    let res = jsonSearch(result[z], category, itemValue);\r\n                    return res;\r\n                }\r\n            }\r\n}\r\n\r\nexport function jsonSearchFuzzy(result, categoryOriginal, itemValue){\r\n    //create a copy of categoryOriginal so that the array being passed in isn't destroyed\r\n    let category = categoryOriginal.slice(0);\r\n    //BASE CASE: category array is empty meaning result contains the value to compare to itemValue\r\n            if(category.length == 0){\r\n                if(result === null || itemValue === null){\r\n                    return false;\r\n                }\r\n                    let resultLower = result.toLowerCase();\r\n                    let itemValueLower = itemValue.toLowerCase();\r\n                    if(resultLower.includes(itemValueLower)){\r\n                        return true;\r\n                    }\r\n                    else{\r\n                        return false;\r\n                    }\r\n            }\r\n    //More recursion needed\r\n            else{\r\n                let z = category.shift();\r\n    //if current part is array, apply map \r\n                if(z === true){\r\n                    let mapResult = result.map((temp) => {\r\n                        let newCategory = category.slice(0);\r\n                        return jsonSearchFuzzy(temp, newCategory, itemValue);\r\n                    });\r\n                    for(let thing of mapResult){\r\n                        if(thing){\r\n                            \r\n                            return true;\r\n                        }\r\n                    }\r\n                    return false;\r\n                }\r\n                else{\r\n                    let res = jsonSearchFuzzy(result[z], category, itemValue);\r\n                    return res;\r\n                }\r\n            }\r\n}",{"ruleId":"40","replacedBy":"41"},{"ruleId":"42","replacedBy":"43"},{"ruleId":"44","severity":1,"message":"45","line":1,"column":17,"nodeType":"46","messageId":"47","endLine":1,"endColumn":25},{"ruleId":"44","severity":1,"message":"48","line":8,"column":8,"nodeType":"46","messageId":"47","endLine":8,"endColumn":16},{"ruleId":"44","severity":1,"message":"49","line":9,"column":8,"nodeType":"46","messageId":"47","endLine":9,"endColumn":21},{"ruleId":"44","severity":1,"message":"50","line":10,"column":8,"nodeType":"46","messageId":"47","endLine":10,"endColumn":19},{"ruleId":"51","severity":1,"message":"52","line":162,"column":53,"nodeType":"53","messageId":"54","endLine":162,"endColumn":55},{"ruleId":"55","severity":1,"message":"56","line":222,"column":19,"nodeType":"57","endLine":222,"endColumn":418},{"ruleId":"58","severity":1,"message":"59","line":7,"column":29,"nodeType":"60","messageId":"61","endLine":7,"endColumn":31},{"ruleId":"40","replacedBy":"62"},{"ruleId":"42","replacedBy":"63"},{"ruleId":"64","severity":1,"message":"65","line":5,"column":1,"nodeType":"66","endLine":5,"endColumn":45},{"ruleId":"58","severity":1,"message":"59","line":11,"column":32,"nodeType":"60","messageId":"61","endLine":11,"endColumn":34},{"ruleId":"58","severity":1,"message":"59","line":47,"column":32,"nodeType":"60","messageId":"61","endLine":47,"endColumn":34},"no-native-reassign",["67"],"no-negated-in-lhs",["68"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'Carousel' is defined but never used.","'ButtonToolBar' is defined but never used.","'ButtonGroup' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","jsx-a11y/iframe-has-title","<iframe> elements must have a unique title property.","JSXOpeningElement","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected",["67"],["68"],"import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","no-global-assign","no-unsafe-negation"]